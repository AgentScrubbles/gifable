<% layout('/views/layout.eta', { bodyClass: 'search' }) %>

<main id="main"></main>

<script type="module" defer>
  import { render } from 'https://esm.sh/preact';
  import { html } from 'https://esm.sh/htm/preact';
  import { useState, useEffect } from 'https://esm.sh/preact/hooks';

  const params = new URLSearchParams(window.location.search);
  const searchQuery = params.get('search');

  let intervalId = null;

  function App(props) {
    const [loading, setLoading] = useState(true);
    const [assets, setAssets] = useState([]);
    const [search, setSearch] = useState(searchQuery || '');
    const [playingId, setPlayingId] = useState(null);

    useEffect(() => {
      if (playingId) {
        clearInterval(intervalId);
        intervalId = setInterval(() => {
          setPlayingId(null);
        }, 10_000);
      } else {
        clearInterval(intervalId);
      }
      return () => clearInterval(intervalId);
    }, [playingId]);

    useEffect(async () => {
      setLoading(true);
      setPlayingId(null);
      let params = '';
      if (search) {
        params = new URLSearchParams({ search });
      }
      const resp = await fetch('/api/assets?' + params);
      setAssets(await resp.json());
      window.history.pushState(null, '', '/?' + params);
      setLoading(false);
    }, [search]);

    return html`<div>
      <${Search} setSearch=${setSearch} search=${search} />
      <${Results}
        assets=${assets}
        loading=${loading}
        playingId=${playingId}
        setPlayingId=${setPlayingId}
      />
    </div>`;
  }

  function Search(props) {
    return html`<search
      ><input
        type="search"
        value=${props.search}
        placeholder="Search"
        aria-label="Search for a file"
        onInput=${debounce(
          (event) => props.setSearch(event.target.value),
          500
        )}
    /></search>`;
  }

  function Results(props) {
    return html`<div id="results">
      ${props.loading ? html`<p>Loading...</p>` : ''}
      ${props.assets.length === 0 && !props.loading
        ? html`<p><em>No results found</em></p>`
        : ''}
      ${props.assets.map(
        (data) =>
          html`<${Asset}
            ...${data}
            isPlaying=${data.id === props.playingId}
            setPlayingId=${props.setPlayingId}
          />`
      )}
    </div>`;
  }

  function Asset(props) {
    const { id, url, isPlaying, setPlayingId, thumbnailUrl } = props;
    const isPlayable = Boolean(url.endsWith('.gif') && thumbnailUrl);
    return html`<figure key=${id}>
      <div class="img-wrapper">
        <a href="/view/${id}">
          ${!isPlayable
            ? html`<${AssetImage} ...${props} src=${url} />`
            : isPlaying
            ? html`<${AssetImage} ...${props} src=${url} />`
            : html`<${AssetImage} ...${props} src=${thumbnailUrl || url} />`}
        </a>
        ${isPlayable
          ? html`<button
              tabindex="-1"
              title=${isPlaying ? 'Pause' : 'Play'}
              classList="play"
              onClick=${() => setPlayingId(isPlaying ? null : props.id)}
            >
              ${isPlaying ? '⏸' : '▶'}
            </button>`
          : ''}
      </div>
      <figcaption>
        ${props.url.split('/').pop()}
        ${!props.alt ? html`<p><em>⚠️ No alt text</em></p>` : ''}
      </figcaption>
    </figure>`;
  }

  function AssetImage(props) {
    return html`<img
      loading="lazy"
      width="${props.width || 300}"
      height="${props.height || 200}"
      src="${props.src}"
      alt="${props.alt}"
      style="${`background-color: ${props.color};`}"
    />`;
  }

  function debounce(callback, wait) {
    let timeoutId = null;
    return (...args) => {
      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(() => {
        callback.apply(null, args);
      }, wait);
    };
  }

  render(html`<${App} />`, document.getElementById('main'));
</script>
