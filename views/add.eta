<% layout('/views/layout.eta') %>

<main>
  <form id="add-form" name="add">
    <fieldset id="add-fieldset">
      <legend><h3>Add a file</h3></legend>

      <p>
        Select a file from your computer or enter the URL of an image file. You
        can optionally add a search comment and alt text.
      </p>

      <input type="radio" id="url-radio" name="method" value="url" checked />
      <label for="url">URL</label>
      <input type="radio" id="file-radio" name="method" value="file" />
      <label for="file">File</label>

      <div id="url-group">
        <label for="url">URL</label>
        <input id="url" name="url" type="text" required />
      </div>

      <div id="file-group" style="display: none">
        <label for="file">File</label>
        <input
          id="file"
          name="file"
          type="file"
          accept="image/png, image/jpeg, image/gif"
        />
      </div>

      <label for="name">File name</label>
      <input
        id="filename"
        name="filename"
        type="text"
        pattern="^[a-z0-9-]+\.(gif|jpg|png)$"
        required
        placeholder="example.gif"
      />

      <label for="comment">Search comment</label>
      <textarea id="comment" name="comment"></textarea>
      <label for="alt">Alt text</label>
      <textarea id="alt" name="alt"></textarea>
      <progress id="progress" max="100" value="0"></progress>
      <div id="message"></div>
      <button type="reset">Reset</button>
      <button type="submit">Save</button>
    </fieldset>
  </form>
</main>

<script type="module">
  const form = document.getElementById('add-form');
  const fieldset = document.getElementById('add-fieldset');
  const message = document.getElementById('message');
  const inputs = document.querySelectorAll('input, select, textarea');
  const progress = document.getElementById('progress');
  const fileGroup = document.getElementById('file-group');
  const urlGroup = document.getElementById('url-group');
  const fileInput = document.getElementById('file');
  const urlInput = document.getElementById('url');
  const urlRadio = document.getElementById('url-radio');
  const fileRadio = document.getElementById('file-radio');
  const filenameInput = document.getElementById('filename');

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const { url, filename, comment, alt } = serializeForm(event.target);
    setLoading(true);
    let asset;
    progress.value = 0;

    const interval = setInterval(() => {
      progress.value += 1;
    }, 200);

    try {
      if (fileRadio.checked) {
        const data = new FormData();
        data.append('file', fileInput.files[0]);
        data.append('filename', filename);
        asset = await request('POST', '/api/upload-file', data);
      } else {
        asset = await request('POST', '/api/upload-url', { url, filename });
      }
      progress.value = 33;
    } catch (error) {
      resetProgress(interval);
      setMessage(error.message);
      setLoading(false);
      return;
    }

    try {
      const response = await request('POST', `/api/assets/${asset.id}`, {
        comment,
        alt,
      });
      progress.value = 66;
    } catch (error) {
      resetProgress(interval);
      setMessage(error.message);
      setLoading(false);
    }

    try {
      await request('POST', `/api/assets/${asset.id}/parse`);
      progress.value = 100;
    } catch (error) {
      console.log(error);
    }

    clearInterval(interval);
    setMessage('Saved!');
    setTimeout(() => {
      window.location = '/view/' + asset.id;
    }, 1000);
  });

  inputs.forEach((input) => {
    input.addEventListener('invalid', (event) => {
      input.classList.add('error');
    });
  });

  form.addEventListener('reset', () => {
    inputs.forEach((input) => {
      input.classList.remove('error');
    });
    setMessage('');
  });

  fileRadio.addEventListener('change', () => {
    fileGroup.style.display = 'block';
    fileInput.required = true;
    urlGroup.style.display = 'none';
    urlInput.required = false;
  });

  fileInput.addEventListener('change', () => {
    const file = fileInput.files[0];
    const filename = file.name;
    filenameInput.value = filename.toLowerCase();
  });

  urlRadio.addEventListener('change', () => {
    fileGroup.style.display = 'none';
    fileInput.required = false;
    urlGroup.style.display = 'block';
    urlInput.required = true;
  });

  function request(method, url, data = {}) {
    const headers = {};
    let body;

    if (data.constructor === FormData) {
      body = data;
    } else {
      headers['Content-Type'] = 'application/json';
      body = JSON.stringify(data);
    }

    return fetch(url, {
      method,
      body,
      headers,
    }).then(async (response) => {
      const json = await response.json();
      if (response.ok) {
        return json;
      }
      throw json;
    });
  }

  function resetProgress(interval) {
    progress.value = 0;
    clearInterval(interval);
  }

  function setLoading(loading) {
    fieldset.disabled = loading;
    fieldset.querySelector('button[type="submit"]').textContent = loading
      ? 'Saving...'
      : 'Save';
  }

  function setMessage(str) {
    message.lastChild?.remove();

    if (!str) return;
    const p = document.createElement('p');
    p.classList.add('notice');
    p.textContent = str;
    message.appendChild(p);
  }

  function serializeForm(form) {
    const obj = {};
    const formData = new FormData(form);
    for (const key of formData.keys()) {
      obj[key] = formData.get(key);
    }
    return obj;
  }
</script>
